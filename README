forego - A Forth implementation in Go
=====================================

Why?
----

For ego.  This is me learning the language.  Both of them.

Someone once said that everybody who learns Forth and likes it
thinks "oh nice, that'd be cool to write a Forth VM".  This
happened to me, but I had no actual reason to do it until I
started searching for a Go learning project.


And?
----

Lessons learned: writing a VM without performance constrains or
a crude assembler is easy, wrapping your head around multiple
run times of Forth compiling words is less so.


So What Is It?
--------------

Forego is a naive implementation of a Forth virtual machine in Go
that I hacked up in a week or so.  Here are its main features and
misfeatures:

The Good:

- The compiler, assembler, parser (except numerals), main loop
  (except line input) and disassembler are now written in Forth.
  Some supported words include:
    : :noname ; ;code [ ] , ' ['] char [char] compile, evaluate
    literal postpone immediate parse parse-word s" ."
    value allot variable constant create does>
    type . ? <# # #s hold sign #> dump dump2go words
    if else then begin while repeat until again ahead do ?do loop
    +loop i j unloop leave case endcase of endof
    exit quit abort bye
  ...and those are written in Forth.  Type "words" at the prompt
  to see the whole list.

The Bad:

- It doesn't support the full CORE word set yet.  Most of it is
  already in though.  But I don't promise full ANS compliance.

- The parts which should be written in Forth but are still in Go
  are line input and numeral parsing.

- The "kernel" ("machine" code) is hardcoded in the package.

- It's probably damn slow.

- The README is incomplete.
