// Autogenerated!  Shall not be edited.

package forth

const (
	A_tib0 = 0xd8
	A_sourceID = 0x130
	A_base = 0x18c
	A_funcpad = 0xfcf8
	A_numberTib0 = 0xd4
	A_toIn0 = 0xdc
	A_dicthead = 0x104
	A_pad = 0xfd00
	A_defaultSource = 0xfe00
)

var kernel = []byte{
	0x00, 0x00, 0x00, 0x02, // 0000 	(abort)
	0x4e, 0x00, 0x00, 0x00, // 0004 	PUSH	0
	0x40, 0x00, 0x01, 0x30, // 0008 	PUSH	source-id
	0x00, 0x00, 0x00, 0x11, // 000c 	!
	0x00, 0x00, 0x00, 0x03, // 0010 	(quit)
	0x00, 0x00, 0x00, 0x42, // 0014 	refill
	0x30, 0x00, 0x00, 0x40, // 0018 	jz	l;eof
	0x10, 0x00, 0x00, 0x44, // 001c 	call	lineproc
	0x40, 0x00, 0x01, 0x18, // 0020 	PUSH	state
	0x00, 0x00, 0x00, 0x10, // 0024 	@
	0x00, 0x00, 0x00, 0x22, // 0028 	0=
	0x30, 0x00, 0x00, 0x10, // 002c 	jz	l;quit
	0x40, 0x00, 0x00, 0xc0, // 0030 	PUSH	s"ok:"
	0x44, 0x00, 0x00, 0x01, // 0034 	PUSH	4
	0x00, 0x00, 0x00, 0x48, // 0038 	type
	0x20, 0x00, 0x00, 0x10, // 003c 	jmp	l;quit
	0x00, 0x00, 0x00, 0x51, // 0040 	eof
	0x00, 0x00, 0x00, 0x44, // 0044 	parse-word
	0x50, 0x00, 0x01, 0x00, // 0048 	PICK	1 0
	0x30, 0x00, 0x00, 0x9c, // 004c 	jz	2drop,exit
	0x00, 0x00, 0x00, 0x4a, // 0050 	(find)
	0x00, 0x00, 0x00, 0x09, // 0054 	?dup
	0x30, 0x00, 0x00, 0x80, // 0058 	jz	trynumber
	0x00, 0x00, 0x00, 0x2d, // 005c 	1-
	0x30, 0x00, 0x00, 0x78, // 0060 	jz	exec
	0x40, 0x00, 0x01, 0x18, // 0064 	PUSH	state
	0x00, 0x00, 0x00, 0x10, // 0068 	@
	0x30, 0x00, 0x00, 0x78, // 006c 	jz	exec
	0x10, 0x00, 0x07, 0xc4, // 0070 	call	compile,
	0x20, 0x00, 0x00, 0x44, // 0074 	jmp	lineproc
	0x00, 0x00, 0x00, 0x49, // 0078 	execute
	0x20, 0x00, 0x00, 0x44, // 007c 	jmp	lineproc
	0x00, 0x00, 0x00, 0x4b, // 0080 	(trynum)
	0x30, 0x00, 0x00, 0xa4, // 0084 	jz	notfound
	0x40, 0x00, 0x01, 0x18, // 0088 	PUSH	state
	0x00, 0x00, 0x00, 0x10, // 008c 	@
	0x30, 0x00, 0x00, 0x44, // 0090 	jz	lineproc
	0x10, 0x00, 0x06, 0xe4, // 0094 	call	literal
	0x20, 0x00, 0x00, 0x44, // 0098 	jmp	lineproc
	0x00, 0x00, 0x00, 0x08, // 009c 	2drop
	0x00, 0x00, 0x00, 0x01, // 00a0 	exit
	0x42, 0x00, 0x00, 0x05, // 00a4 	PUSH	a
	0x00, 0x00, 0x00, 0x41, // 00a8 	emit
	0x00, 0x00, 0x00, 0x48, // 00ac 	type
	0x40, 0x00, 0x00, 0xc4, // 00b0 	PUSH	s"?"
	0x44, 0x00, 0x00, 0x01, // 00b4 	PUSH	4
	0x00, 0x00, 0x00, 0x48, // 00b8 	type
	0x20, 0x00, 0x00, 0x00, // 00bc 	jmp	l;abort
	0x6f, 0x6b, 0x3a, 0x20, // 00c0 	.C	6f6b3a20
	0x20, 0x3f, 0x20, 0x20, // 00c4 	.C	203f2020
	0x00, 0x00, 0x00, 0x00, // 00c8 	.C	0
	0x00, 0x00, 0x00, 0x00, // 00cc 	.C	0
	0x00, 0x00, 0x00, 0x00, // 00d0 	.C	0
	0x00, 0x00, 0x00, 0x00, // 00d4 	.C	0
	0x00, 0x00, 0x00, 0x00, // 00d8 	.C	0
	0x00, 0x00, 0x00, 0x00, // 00dc 	.C	0
	0x44, 0x68, 0x65, 0x72, // 00e0 .B 44 'here'
	0x65, 0x00, 0x00, 0x00, // 00e4 \
	0x00, 0x00, 0x00, 0x00, // 00e8 .C 0
	0x00, 0x00, 0x00, 0x10, // 00ec 	@
	0x00, 0x00, 0x08, 0xd4, // 00f0 	.C	l;end
	0x47, 0x28, 0x77, 0x6f, // 00f4 .B 47 '(words)'
	0x72, 0x64, 0x73, 0x29, // 00f8 \
	0x00, 0x00, 0x00, 0xe0, // 00fc .C w/here
	0x00, 0x00, 0x00, 0x00, // 0100 	nop
	0x00, 0x00, 0x08, 0x8c, // 0104 	.C	lastword
	0x45, 0x73, 0x74, 0x61, // 0108 .B 45 'state'
	0x74, 0x65, 0x00, 0x00, // 010c \
	0x00, 0x00, 0x00, 0xf4, // 0110 .C w/(words)
	0x00, 0x00, 0x00, 0x10, // 0114 	@
	0x00, 0x00, 0x00, 0x00, // 0118 	.C	0
	0x49, 0x73, 0x6f, 0x75, // 011c .B 49 'source-id'
	0x72, 0x63, 0x65, 0x2d, // 0120 \
	0x69, 0x64, 0x00, 0x00, // 0124 \
	0x00, 0x00, 0x01, 0x08, // 0128 .C w/state
	0x00, 0x00, 0x00, 0x10, // 012c 	@
	0x00, 0x00, 0x00, 0x00, // 0130 	.C	0
	0x06, 0x73, 0x6f, 0x75, // 0134 .B 6 'source'
	0x72, 0x63, 0x65, 0x00, // 0138 \
	0x00, 0x00, 0x01, 0x1c, // 013c .C w/source-id
	0x10, 0x00, 0x01, 0x44, // 0140 	call	.
	0x44, 0x00, 0x00, 0x35, // 0144 	PUSH	#tib[0]
	0x10, 0x00, 0x01, 0x64, // 0148 	call	>in/internal
	0x00, 0x00, 0x00, 0x15, // 014c 	2@
	0x00, 0x00, 0x00, 0x01, // 0150 	exit
	0x03, 0x3e, 0x69, 0x6e, // 0154 .B 3 '>in'
	0x00, 0x00, 0x01, 0x34, // 0158 .C w/source
	0x10, 0x00, 0x01, 0x60, // 015c 	call	.
	0x44, 0x00, 0x00, 0x37, // 0160 	PUSH	>in[0]
	0x48, 0x00, 0x00, 0x13, // 0164 	PUSH	source-id
	0x00, 0x00, 0x00, 0x10, // 0168 	@
	0x44, 0x00, 0x00, 0x03, // 016c 	PUSH	c
	0x00, 0x00, 0x00, 0x30, // 0170 	*
	0x00, 0x00, 0x00, 0x2e, // 0174 	+
	0x00, 0x00, 0x00, 0x01, // 0178 	exit
	0x44, 0x62, 0x61, 0x73, // 017c .B 44 'base'
	0x65, 0x00, 0x00, 0x00, // 0180 \
	0x00, 0x00, 0x01, 0x54, // 0184 .C w/>in
	0x00, 0x00, 0x00, 0x00, // 0188 	nop
	0x00, 0x00, 0x00, 0x0a, // 018c 	.C	a
	0x03, 0x6e, 0x6f, 0x70, // 0190 .B 3 'nop'
	0x00, 0x00, 0x01, 0x7c, // 0194 ^
	0x00, 0x00, 0x00, 0x00, // 0198 	nop
	0x04, 0x65, 0x78, 0x69, // 019c .B 4 'exit'
	0x74, 0x00, 0x00, 0x00, // 01a0 \
	0x00, 0x00, 0x01, 0x90, // 01a4 ^
	0x00, 0x00, 0x00, 0x01, // 01a8 	exit
	0x07, 0x28, 0x61, 0x62, // 01ac .B 7 '(abort)'
	0x6f, 0x72, 0x74, 0x29, // 01b0 \
	0x00, 0x00, 0x01, 0x9c, // 01b4 ^
	0x00, 0x00, 0x00, 0x02, // 01b8 	(abort)
	0x06, 0x28, 0x71, 0x75, // 01bc .B 6 '(quit)'
	0x69, 0x74, 0x29, 0x00, // 01c0 \
	0x00, 0x00, 0x01, 0xac, // 01c4 ^
	0x00, 0x00, 0x00, 0x03, // 01c8 	(quit)
	0x04, 0x70, 0x69, 0x63, // 01cc .B 4 'pick'
	0x6b, 0x00, 0x00, 0x00, // 01d0 \
	0x00, 0x00, 0x01, 0xbc, // 01d4 ^
	0x00, 0x00, 0x00, 0x04, // 01d8 	pick
	0x04, 0x72, 0x6f, 0x6c, // 01dc .B 4 'roll'
	0x6c, 0x00, 0x00, 0x00, // 01e0 \
	0x00, 0x00, 0x01, 0xcc, // 01e4 ^
	0x00, 0x00, 0x00, 0x05, // 01e8 	roll
	0x05, 0x64, 0x65, 0x70, // 01ec .B 5 'depth'
	0x74, 0x68, 0x00, 0x00, // 01f0 \
	0x00, 0x00, 0x01, 0xdc, // 01f4 ^
	0x00, 0x00, 0x00, 0x06, // 01f8 	depth
	0x04, 0x64, 0x72, 0x6f, // 01fc .B 4 'drop'
	0x70, 0x00, 0x00, 0x00, // 0200 \
	0x00, 0x00, 0x01, 0xec, // 0204 ^
	0x00, 0x00, 0x00, 0x07, // 0208 	drop
	0x05, 0x32, 0x64, 0x72, // 020c .B 5 '2drop'
	0x6f, 0x70, 0x00, 0x00, // 0210 \
	0x00, 0x00, 0x01, 0xfc, // 0214 ^
	0x00, 0x00, 0x00, 0x08, // 0218 	2drop
	0x04, 0x3f, 0x64, 0x75, // 021c .B 4 '?dup'
	0x70, 0x00, 0x00, 0x00, // 0220 \
	0x00, 0x00, 0x02, 0x0c, // 0224 ^
	0x00, 0x00, 0x00, 0x09, // 0228 	?dup
	0x03, 0x6e, 0x69, 0x70, // 022c .B 3 'nip'
	0x00, 0x00, 0x02, 0x1c, // 0230 ^
	0x00, 0x00, 0x00, 0x0a, // 0234 	nip
	0x04, 0x74, 0x75, 0x63, // 0238 .B 4 'tuck'
	0x6b, 0x00, 0x00, 0x00, // 023c \
	0x00, 0x00, 0x02, 0x2c, // 0240 ^
	0x00, 0x00, 0x00, 0x0b, // 0244 	tuck
	0x02, 0x3e, 0x72, 0x00, // 0248 .B 2 '>r'
	0x00, 0x00, 0x02, 0x38, // 024c ^
	0x00, 0x00, 0x00, 0x0c, // 0250 	>r
	0x02, 0x72, 0x3e, 0x00, // 0254 .B 2 'r>'
	0x00, 0x00, 0x02, 0x48, // 0258 ^
	0x00, 0x00, 0x00, 0x0d, // 025c 	r>
	0x02, 0x72, 0x40, 0x00, // 0260 .B 2 'r@'
	0x00, 0x00, 0x02, 0x54, // 0264 ^
	0x00, 0x00, 0x00, 0x0e, // 0268 	r@
	0x05, 0x72, 0x64, 0x72, // 026c .B 5 'rdrop'
	0x6f, 0x70, 0x00, 0x00, // 0270 \
	0x00, 0x00, 0x02, 0x60, // 0274 ^
	0x00, 0x00, 0x00, 0x0f, // 0278 	rdrop
	0x01, 0x40, 0x00, 0x00, // 027c .B 1 '@'
	0x00, 0x00, 0x02, 0x6c, // 0280 ^
	0x00, 0x00, 0x00, 0x10, // 0284 	@
	0x01, 0x21, 0x00, 0x00, // 0288 .B 1 '!'
	0x00, 0x00, 0x02, 0x7c, // 028c ^
	0x00, 0x00, 0x00, 0x11, // 0290 	!
	0x02, 0x63, 0x40, 0x00, // 0294 .B 2 'c@'
	0x00, 0x00, 0x02, 0x88, // 0298 ^
	0x00, 0x00, 0x00, 0x12, // 029c 	c@
	0x02, 0x63, 0x21, 0x00, // 02a0 .B 2 'c!'
	0x00, 0x00, 0x02, 0x94, // 02a4 ^
	0x00, 0x00, 0x00, 0x13, // 02a8 	c!
	0x02, 0x32, 0x21, 0x00, // 02ac .B 2 '2!'
	0x00, 0x00, 0x02, 0xa0, // 02b0 ^
	0x00, 0x00, 0x00, 0x14, // 02b4 	2!
	0x02, 0x32, 0x40, 0x00, // 02b8 .B 2 '2@'
	0x00, 0x00, 0x02, 0xac, // 02bc ^
	0x00, 0x00, 0x00, 0x15, // 02c0 	2@
	0x02, 0x2b, 0x21, 0x00, // 02c4 .B 2 '+!'
	0x00, 0x00, 0x02, 0xb8, // 02c8 ^
	0x00, 0x00, 0x00, 0x16, // 02cc 	+!
	0x05, 0x65, 0x72, 0x61, // 02d0 .B 5 'erase'
	0x73, 0x65, 0x00, 0x00, // 02d4 \
	0x00, 0x00, 0x02, 0xc4, // 02d8 ^
	0x00, 0x00, 0x00, 0x17, // 02dc 	erase
	0x04, 0x66, 0x69, 0x6c, // 02e0 .B 4 'fill'
	0x6c, 0x00, 0x00, 0x00, // 02e4 \
	0x00, 0x00, 0x02, 0xd0, // 02e8 ^
	0x00, 0x00, 0x00, 0x18, // 02ec 	fill
	0x04, 0x6d, 0x6f, 0x76, // 02f0 .B 4 'move'
	0x65, 0x00, 0x00, 0x00, // 02f4 \
	0x00, 0x00, 0x02, 0xe0, // 02f8 ^
	0x00, 0x00, 0x00, 0x19, // 02fc 	move
	0x01, 0x3d, 0x00, 0x00, // 0300 .B 1 '='
	0x00, 0x00, 0x02, 0xf0, // 0304 ^
	0x00, 0x00, 0x00, 0x1a, // 0308 	=
	0x02, 0x3c, 0x3e, 0x00, // 030c .B 2 '<>'
	0x00, 0x00, 0x03, 0x00, // 0310 ^
	0x00, 0x00, 0x00, 0x1b, // 0314 	<>
	0x01, 0x3c, 0x00, 0x00, // 0318 .B 1 '<'
	0x00, 0x00, 0x03, 0x0c, // 031c ^
	0x00, 0x00, 0x00, 0x1c, // 0320 	<
	0x01, 0x3e, 0x00, 0x00, // 0324 .B 1 '>'
	0x00, 0x00, 0x03, 0x18, // 0328 ^
	0x00, 0x00, 0x00, 0x1d, // 032c 	>
	0x02, 0x75, 0x3c, 0x00, // 0330 .B 2 'u<'
	0x00, 0x00, 0x03, 0x24, // 0334 ^
	0x00, 0x00, 0x00, 0x1e, // 0338 	u<
	0x02, 0x75, 0x3e, 0x00, // 033c .B 2 'u>'
	0x00, 0x00, 0x03, 0x30, // 0340 ^
	0x00, 0x00, 0x00, 0x1f, // 0344 	u>
	0x02, 0x30, 0x3c, 0x00, // 0348 .B 2 '0<'
	0x00, 0x00, 0x03, 0x3c, // 034c ^
	0x00, 0x00, 0x00, 0x20, // 0350 	0<
	0x02, 0x30, 0x3e, 0x00, // 0354 .B 2 '0>'
	0x00, 0x00, 0x03, 0x48, // 0358 ^
	0x00, 0x00, 0x00, 0x21, // 035c 	0>
	0x02, 0x30, 0x3d, 0x00, // 0360 .B 2 '0='
	0x00, 0x00, 0x03, 0x54, // 0364 ^
	0x00, 0x00, 0x00, 0x22, // 0368 	0=
	0x03, 0x30, 0x3c, 0x3e, // 036c .B 3 '0<>'
	0x00, 0x00, 0x03, 0x60, // 0370 ^
	0x00, 0x00, 0x00, 0x23, // 0374 	0<>
	0x06, 0x69, 0x6e, 0x76, // 0378 .B 6 'invert'
	0x65, 0x72, 0x74, 0x00, // 037c \
	0x00, 0x00, 0x03, 0x6c, // 0380 ^
	0x00, 0x00, 0x00, 0x24, // 0384 	invert
	0x03, 0x61, 0x6e, 0x64, // 0388 .B 3 'and'
	0x00, 0x00, 0x03, 0x78, // 038c ^
	0x00, 0x00, 0x00, 0x25, // 0390 	and
	0x02, 0x6f, 0x72, 0x00, // 0394 .B 2 'or'
	0x00, 0x00, 0x03, 0x88, // 0398 ^
	0x00, 0x00, 0x00, 0x26, // 039c 	or
	0x03, 0x78, 0x6f, 0x72, // 03a0 .B 3 'xor'
	0x00, 0x00, 0x03, 0x94, // 03a4 ^
	0x00, 0x00, 0x00, 0x27, // 03a8 	xor
	0x06, 0x6c, 0x73, 0x68, // 03ac .B 6 'lshift'
	0x69, 0x66, 0x74, 0x00, // 03b0 \
	0x00, 0x00, 0x03, 0xa0, // 03b4 ^
	0x00, 0x00, 0x00, 0x28, // 03b8 	lshift
	0x06, 0x72, 0x73, 0x68, // 03bc .B 6 'rshift'
	0x69, 0x66, 0x74, 0x00, // 03c0 \
	0x00, 0x00, 0x03, 0xac, // 03c4 ^
	0x00, 0x00, 0x00, 0x29, // 03c8 	rshift
	0x02, 0x32, 0x2a, 0x00, // 03cc .B 2 '2*'
	0x00, 0x00, 0x03, 0xbc, // 03d0 ^
	0x00, 0x00, 0x00, 0x2a, // 03d4 	2*
	0x02, 0x32, 0x2f, 0x00, // 03d8 .B 2 '2/'
	0x00, 0x00, 0x03, 0xcc, // 03dc ^
	0x00, 0x00, 0x00, 0x2b, // 03e0 	2/
	0x02, 0x31, 0x2b, 0x00, // 03e4 .B 2 '1+'
	0x00, 0x00, 0x03, 0xd8, // 03e8 ^
	0x00, 0x00, 0x00, 0x2c, // 03ec 	1+
	0x02, 0x31, 0x2d, 0x00, // 03f0 .B 2 '1-'
	0x00, 0x00, 0x03, 0xe4, // 03f4 ^
	0x00, 0x00, 0x00, 0x2d, // 03f8 	1-
	0x01, 0x2b, 0x00, 0x00, // 03fc .B 1 '+'
	0x00, 0x00, 0x03, 0xf0, // 0400 ^
	0x00, 0x00, 0x00, 0x2e, // 0404 	+
	0x01, 0x2d, 0x00, 0x00, // 0408 .B 1 '-'
	0x00, 0x00, 0x03, 0xfc, // 040c ^
	0x00, 0x00, 0x00, 0x2f, // 0410 	-
	0x01, 0x2a, 0x00, 0x00, // 0414 .B 1 '*'
	0x00, 0x00, 0x04, 0x08, // 0418 ^
	0x00, 0x00, 0x00, 0x30, // 041c 	*
	0x01, 0x2f, 0x00, 0x00, // 0420 .B 1 '/'
	0x00, 0x00, 0x04, 0x14, // 0424 ^
	0x00, 0x00, 0x00, 0x31, // 0428 	/
	0x03, 0x6d, 0x6f, 0x64, // 042c .B 3 'mod'
	0x00, 0x00, 0x04, 0x20, // 0430 ^
	0x00, 0x00, 0x00, 0x32, // 0434 	mod
	0x04, 0x2f, 0x6d, 0x6f, // 0438 .B 4 '/mod'
	0x64, 0x00, 0x00, 0x00, // 043c \
	0x00, 0x00, 0x04, 0x2c, // 0440 ^
	0x00, 0x00, 0x00, 0x33, // 0444 	/mod
	0x02, 0x2a, 0x2f, 0x00, // 0448 .B 2 '*/'
	0x00, 0x00, 0x04, 0x38, // 044c ^
	0x00, 0x00, 0x00, 0x34, // 0450 	*/
	0x05, 0x2a, 0x2f, 0x6d, // 0454 .B 5 '*/mod'
	0x6f, 0x64, 0x00, 0x00, // 0458 \
	0x00, 0x00, 0x04, 0x48, // 045c ^
	0x00, 0x00, 0x00, 0x35, // 0460 	*/mod
	0x02, 0x6d, 0x2a, 0x00, // 0464 .B 2 'm*'
	0x00, 0x00, 0x04, 0x54, // 0468 ^
	0x00, 0x00, 0x00, 0x36, // 046c 	m*
	0x03, 0x75, 0x6d, 0x2a, // 0470 .B 3 'um*'
	0x00, 0x00, 0x04, 0x64, // 0474 ^
	0x00, 0x00, 0x00, 0x37, // 0478 	um*
	0x06, 0x66, 0x6d, 0x2f, // 047c .B 6 'fm/mod'
	0x6d, 0x6f, 0x64, 0x00, // 0480 \
	0x00, 0x00, 0x04, 0x70, // 0484 ^
	0x00, 0x00, 0x00, 0x38, // 0488 	fm/mod
	0x06, 0x73, 0x6d, 0x2f, // 048c .B 6 'sm/rem'
	0x72, 0x65, 0x6d, 0x00, // 0490 \
	0x00, 0x00, 0x04, 0x7c, // 0494 ^
	0x00, 0x00, 0x00, 0x39, // 0498 	sm/rem
	0x06, 0x75, 0x6d, 0x2f, // 049c .B 6 'um/mod'
	0x6d, 0x6f, 0x64, 0x00, // 04a0 \
	0x00, 0x00, 0x04, 0x8c, // 04a4 ^
	0x00, 0x00, 0x00, 0x3a, // 04a8 	um/mod
	0x03, 0x61, 0x62, 0x73, // 04ac .B 3 'abs'
	0x00, 0x00, 0x04, 0x9c, // 04b0 ^
	0x00, 0x00, 0x00, 0x3b, // 04b4 	abs
	0x03, 0x6b, 0x65, 0x79, // 04b8 .B 3 'key'
	0x00, 0x00, 0x04, 0xac, // 04bc ^
	0x00, 0x00, 0x00, 0x40, // 04c0 	key
	0x04, 0x65, 0x6d, 0x69, // 04c4 .B 4 'emit'
	0x74, 0x00, 0x00, 0x00, // 04c8 \
	0x00, 0x00, 0x04, 0xb8, // 04cc ^
	0x00, 0x00, 0x00, 0x41, // 04d0 	emit
	0x06, 0x72, 0x65, 0x66, // 04d4 .B 6 'refill'
	0x69, 0x6c, 0x6c, 0x00, // 04d8 \
	0x00, 0x00, 0x04, 0xc4, // 04dc ^
	0x00, 0x00, 0x00, 0x42, // 04e0 	refill
	0x05, 0x70, 0x61, 0x72, // 04e4 .B 5 'parse'
	0x73, 0x65, 0x00, 0x00, // 04e8 \
	0x00, 0x00, 0x04, 0xd4, // 04ec ^
	0x00, 0x00, 0x00, 0x43, // 04f0 	parse
	0x0a, 0x70, 0x61, 0x72, // 04f4 .B a 'parse-word'
	0x73, 0x65, 0x2d, 0x77, // 04f8 \
	0x6f, 0x72, 0x64, 0x00, // 04fc \
	0x00, 0x00, 0x04, 0xe4, // 0500 ^
	0x00, 0x00, 0x00, 0x44, // 0504 	parse-word
	0x01, 0x2e, 0x00, 0x00, // 0508 .B 1 '.'
	0x00, 0x00, 0x04, 0xf4, // 050c ^
	0x00, 0x00, 0x00, 0x45, // 0510 	.
	0x05, 0x77, 0x6f, 0x72, // 0514 .B 5 'words'
	0x64, 0x73, 0x00, 0x00, // 0518 \
	0x00, 0x00, 0x05, 0x08, // 051c ^
	0x00, 0x00, 0x00, 0x46, // 0520 	words
	0x05, 0x74, 0x72, 0x61, // 0524 .B 5 'trace'
	0x63, 0x65, 0x00, 0x00, // 0528 \
	0x00, 0x00, 0x05, 0x14, // 052c ^
	0x00, 0x00, 0x00, 0x47, // 0530 	trace
	0x04, 0x74, 0x79, 0x70, // 0534 .B 4 'type'
	0x65, 0x00, 0x00, 0x00, // 0538 \
	0x00, 0x00, 0x05, 0x24, // 053c ^
	0x00, 0x00, 0x00, 0x48, // 0540 	type
	0x07, 0x65, 0x78, 0x65, // 0544 .B 7 'execute'
	0x63, 0x75, 0x74, 0x65, // 0548 \
	0x00, 0x00, 0x05, 0x34, // 054c ^
	0x00, 0x00, 0x00, 0x49, // 0550 	execute
	0x06, 0x28, 0x66, 0x69, // 0554 .B 6 '(find)'
	0x6e, 0x64, 0x29, 0x00, // 0558 \
	0x00, 0x00, 0x05, 0x44, // 055c ^
	0x00, 0x00, 0x00, 0x4a, // 0560 	(find)
	0x08, 0x28, 0x74, 0x72, // 0564 .B 8 '(trynum)'
	0x79, 0x6e, 0x75, 0x6d, // 0568 \
	0x29, 0x00, 0x00, 0x00, // 056c \
	0x00, 0x00, 0x05, 0x54, // 0570 ^
	0x00, 0x00, 0x00, 0x4b, // 0574 	(trynum)
	0x04, 0x64, 0x75, 0x6d, // 0578 .B 4 'dump'
	0x70, 0x00, 0x00, 0x00, // 057c \
	0x00, 0x00, 0x05, 0x64, // 0580 ^
	0x00, 0x00, 0x00, 0x4e, // 0584 	dump
	0x03, 0x62, 0x79, 0x65, // 0588 .B 3 'bye'
	0x00, 0x00, 0x05, 0x78, // 058c ^
	0x00, 0x00, 0x00, 0x50, // 0590 	bye
	0x03, 0x65, 0x6f, 0x66, // 0594 .B 3 'eof'
	0x00, 0x00, 0x05, 0x88, // 0598 ^
	0x00, 0x00, 0x00, 0x51, // 059c 	eof
	0x04, 0x71, 0x75, 0x69, // 05a0 .B 4 'quit'
	0x74, 0x00, 0x00, 0x00, // 05a4 \
	0x00, 0x00, 0x05, 0x94, // 05a8 .C w/(last-primitive)
	0x20, 0x00, 0x00, 0x10, // 05ac 	jmp	l;quit
	0x05, 0x61, 0x62, 0x6f, // 05b0 .B 5 'abort'
	0x72, 0x74, 0x00, 0x00, // 05b4 \
	0x00, 0x00, 0x05, 0xa0, // 05b8 .C w/quit
	0x20, 0x00, 0x00, 0x00, // 05bc 	jmp	l;abort
	0x41, 0x5d, 0x00, 0x00, // 05c0 .B 41 ']'
	0x00, 0x00, 0x05, 0xb0, // 05c4 .C w/abort
	0x10, 0x00, 0x05, 0xd0, // 05c8 	call	]
	0xff, 0xff, 0xff, 0xff, // 05cc 	.C	ffffffff
	0x00, 0x00, 0x00, 0x10, // 05d0 	@
	0x46, 0x00, 0x00, 0x23, // 05d4 	PUSH	state
	0x20, 0x00, 0x06, 0x78, // 05d8 	jmp	!,exit
	0xc1, 0x5b, 0x00, 0x00, // 05dc .B c1 '['
	0x00, 0x00, 0x05, 0xc0, // 05e0 .C w/]
	0x10, 0x00, 0x05, 0xd0, // 05e4 	call	]
	0x00, 0x00, 0x00, 0x00, // 05e8 	.C	0
	0x01, 0x2c, 0x00, 0x00, // 05ec .B 1 ','
	0x00, 0x00, 0x05, 0xdc, // 05f0 .C w/[
	0x10, 0x00, 0x05, 0xf8, // 05f4 	call	.
	0x48, 0x00, 0x00, 0x0f, // 05f8 	PUSH	here
	0x00, 0x00, 0x00, 0x10, // 05fc 	@
	0x00, 0x00, 0x00, 0x11, // 0600 	!
	0x44, 0x00, 0x00, 0x01, // 0604 	PUSH	4
	0x48, 0x00, 0x00, 0x0f, // 0608 	PUSH	here
	0x00, 0x00, 0x00, 0x16, // 060c 	+!
	0x00, 0x00, 0x00, 0x01, // 0610 	exit
	0x02, 0x63, 0x2c, 0x00, // 0614 .B 2 'c,'
	0x00, 0x00, 0x05, 0xec, // 0618 .C w/,
	0x10, 0x00, 0x06, 0x20, // 061c 	call	.
	0x48, 0x00, 0x00, 0x0f, // 0620 	PUSH	here
	0x00, 0x00, 0x00, 0x10, // 0624 	@
	0x00, 0x00, 0x00, 0x13, // 0628 	c!
	0x40, 0x00, 0x00, 0x01, // 062c 	PUSH	1
	0x20, 0x00, 0x06, 0x08, // 0630 	jmp	here,+!,exit
	0x07, 0x61, 0x6c, 0x69, // 0634 .B 7 'aligned'
	0x67, 0x6e, 0x65, 0x64, // 0638 \
	0x00, 0x00, 0x06, 0x14, // 063c .C w/c,
	0x10, 0x00, 0x06, 0x44, // 0640 	call	.
	0x40, 0x00, 0x00, 0x03, // 0644 	PUSH	3
	0x00, 0x00, 0x00, 0x2e, // 0648 	+
	0x45, 0xff, 0xff, 0xff, // 064c 	PUSH	fffffffc
	0x00, 0x00, 0x00, 0x25, // 0650 	and
	0x00, 0x00, 0x00, 0x01, // 0654 	exit
	0x05, 0x61, 0x6c, 0x69, // 0658 .B 5 'align'
	0x67, 0x6e, 0x00, 0x00, // 065c \
	0x00, 0x00, 0x06, 0x34, // 0660 .C w/aligned
	0x10, 0x00, 0x06, 0x68, // 0664 	call	.
	0x48, 0x00, 0x00, 0x0f, // 0668 	PUSH	here
	0x00, 0x00, 0x00, 0x10, // 066c 	@
	0x10, 0x00, 0x06, 0x44, // 0670 	call	aligned
	0x48, 0x00, 0x00, 0x0f, // 0674 	PUSH	here
	0x00, 0x00, 0x00, 0x11, // 0678 	!
	0x00, 0x00, 0x00, 0x01, // 067c 	exit
	0x01, 0x27, 0x00, 0x00, // 0680 .B 1 27
	0x00, 0x00, 0x06, 0x58, // 0684 .C w/align
	0x10, 0x00, 0x06, 0x8c, // 0688 	call	.
	0x00, 0x00, 0x00, 0x44, // 068c 	parse-word
	0x00, 0x00, 0x00, 0x4a, // 0690 	(find)
	0x30, 0x00, 0x00, 0xa4, // 0694 	jz	notfound
	0x00, 0x00, 0x00, 0x01, // 0698 	exit
	0x04, 0x28, 0x73, 0x2c, // 069c .B 4 '(s,)'
	0x29, 0x00, 0x00, 0x00, // 06a0 \
	0x00, 0x00, 0x06, 0x80, // 06a4 .C w/'
	0x10, 0x00, 0x06, 0xac, // 06a8 	call	.
	0x50, 0x00, 0x01, 0x00, // 06ac 	PICK	1 0
	0x30, 0x00, 0x00, 0x9c, // 06b0 	jz	2drop,exit
	0x50, 0x00, 0x01, 0x01, // 06b4 	PICK	1 1
	0x00, 0x00, 0x00, 0x12, // 06b8 	c@
	0x10, 0x00, 0x06, 0x20, // 06bc 	call	c,
	0x50, 0x02, 0x01, 0x01, // 06c0 	ROLL	1 1
	0x00, 0x00, 0x00, 0x2c, // 06c4 	1+
	0x50, 0x02, 0x01, 0x01, // 06c8 	ROLL	1 1
	0x00, 0x00, 0x00, 0x2d, // 06cc 	1-
	0x20, 0x00, 0x06, 0xac, // 06d0 	jmp	(s,)/begin
	0x87, 0x6c, 0x69, 0x74, // 06d4 .B 87 'literal'
	0x65, 0x72, 0x61, 0x6c, // 06d8 \
	0x00, 0x00, 0x06, 0x9c, // 06dc .C w/(s,)
	0x10, 0x00, 0x06, 0xe4, // 06e0 	call	.
	0x40, 0x00, 0x00, 0x07, // 06e4 	PUSH	7
	0x00, 0x00, 0x00, 0x0c, // 06e8 	>r
	0x40, 0x00, 0x00, 0x01, // 06ec 	PUSH	1
	0x00, 0x00, 0x00, 0x0e, // 06f0 	r@
	0x00, 0x00, 0x00, 0x28, // 06f4 	lshift
	0x00, 0x00, 0x00, 0x2d, // 06f8 	1-
	0x50, 0x00, 0x01, 0x01, // 06fc 	PICK	1 1
	0x00, 0x00, 0x00, 0x25, // 0700 	and
	0x30, 0x00, 0x07, 0x1c, // 0704 	jz	literal/handle
	0x00, 0x00, 0x00, 0x0d, // 0708 	r>
	0x00, 0x00, 0x00, 0x09, // 070c 	?dup
	0x30, 0x00, 0x07, 0x44, // 0710 	jz	literal/longform
	0x00, 0x00, 0x00, 0x2d, // 0714 	1-
	0x20, 0x00, 0x06, 0xe8, // 0718 	jmp	literal/begin
	0x4f, 0xfe, 0x00, 0x00, // 071c 	PUSH	ff000000
	0x00, 0x00, 0x00, 0x0e, // 0720 	r@
	0x00, 0x00, 0x00, 0x28, // 0724 	lshift
	0x50, 0x00, 0x02, 0x00, // 0728 	PICK	2 0
	0x00, 0x00, 0x00, 0x25, // 072c 	and
	0x00, 0x00, 0x00, 0x09, // 0730 	?dup
	0x30, 0x00, 0x07, 0x78, // 0734 	jz	literal/drop+short
	0x00, 0x00, 0x00, 0x27, // 0738 	xor
	0x30, 0x00, 0x07, 0x7c, // 073c 	jz	literal/shortform
	0x00, 0x00, 0x00, 0x0f, // 0740 	rdrop
	0x50, 0x00, 0x01, 0x00, // 0744 	PICK	1 0
	0x40, 0xff, 0xff, 0xff, // 0748 	PUSH	00ffffff
	0x00, 0x00, 0x00, 0x25, // 074c 	and
	0x4e, 0x80, 0x00, 0x00, // 0750 	PUSH	40000000
	0x00, 0x00, 0x00, 0x26, // 0754 	or
	0x10, 0x00, 0x05, 0xf8, // 0758 	call	,
	0x40, 0x00, 0x00, 0x07, // 075c 	PUSH	7
	0x00, 0x00, 0x00, 0x29, // 0760 	rshift
	0x4e, 0x9c, 0x00, 0x00, // 0764 	PUSH	4e000000
	0x00, 0x00, 0x00, 0x26, // 0768 	or
	0x10, 0x00, 0x05, 0xf8, // 076c 	call	,
	0x42, 0x00, 0x00, 0x13, // 0770 	PUSH	26
	0x20, 0x00, 0x05, 0xf8, // 0774 	jmp	,
	0x00, 0x00, 0x00, 0x07, // 0778 	drop
	0x00, 0x00, 0x00, 0x0e, // 077c 	r@
	0x00, 0x00, 0x00, 0x29, // 0780 	rshift
	0x4f, 0xfc, 0x00, 0x00, // 0784 	PUSH	fe000000
	0x00, 0x00, 0x00, 0x24, // 0788 	invert
	0x00, 0x00, 0x00, 0x25, // 078c 	and
	0x00, 0x00, 0x00, 0x0d, // 0790 	r>
	0x40, 0x00, 0x00, 0x19, // 0794 	PUSH	19
	0x00, 0x00, 0x00, 0x28, // 0798 	lshift
	0x00, 0x00, 0x00, 0x26, // 079c 	or
	0x4e, 0x80, 0x00, 0x00, // 07a0 	PUSH	40000000
	0x00, 0x00, 0x00, 0x26, // 07a4 	or
	0x10, 0x00, 0x05, 0xf8, // 07a8 	call	,
	0x00, 0x00, 0x00, 0x01, // 07ac 	exit
	0x08, 0x63, 0x6f, 0x6d, // 07b0 .B 8 'compile,'
	0x70, 0x69, 0x6c, 0x65, // 07b4 \
	0x2c, 0x00, 0x00, 0x00, // 07b8 \
	0x00, 0x00, 0x06, 0xd4, // 07bc .C w/literal
	0x10, 0x00, 0x07, 0xc4, // 07c0 	call	.
	0x50, 0x00, 0x01, 0x00, // 07c4 	PICK	1 0
	0x40, 0x00, 0x00, 0x01, // 07c8 	PUSH	1
	0x00, 0x00, 0x00, 0x25, // 07cc 	and
	0x30, 0x00, 0x07, 0xe4, // 07d0 	jz	compile,/then
	0x50, 0x00, 0x01, 0x00, // 07d4 	PICK	1 0
	0x10, 0x00, 0x06, 0x44, // 07d8 	call	aligned
	0x10, 0x00, 0x06, 0xe4, // 07dc 	call	literal
	0x00, 0x00, 0x00, 0x2d, // 07e0 	1-
	0x00, 0x00, 0x00, 0x10, // 07e4 	@
	0x00, 0x00, 0x00, 0x09, // 07e8 	?dup
	0x30, 0x00, 0x07, 0xac, // 07ec 	jz	exit
	0x20, 0x00, 0x05, 0xf8, // 07f0 	jmp	,
	0x03, 0x64, 0x75, 0x70, // 07f4 .B 3 'dup'
	0x00, 0x00, 0x07, 0xb0, // 07f8 .C w/compile,
	0x50, 0x00, 0x01, 0x00, // 07fc 	PICK	1 0
	0x04, 0x6f, 0x76, 0x65, // 0800 .B 4 'over'
	0x72, 0x00, 0x00, 0x00, // 0804 \
	0x00, 0x00, 0x07, 0xf4, // 0808 .C w/dup
	0x50, 0x00, 0x01, 0x01, // 080c 	PICK	1 1
	0x04, 0x73, 0x77, 0x61, // 0810 .B 4 'swap'
	0x70, 0x00, 0x00, 0x00, // 0814 \
	0x00, 0x00, 0x08, 0x00, // 0818 .C w/over
	0x50, 0x02, 0x01, 0x01, // 081c 	ROLL	1 1
	0x03, 0x72, 0x6f, 0x74, // 0820 .B 3 'rot'
	0x00, 0x00, 0x08, 0x10, // 0824 .C w/swap
	0x50, 0x02, 0x01, 0x02, // 0828 	ROLL	1 2
	0x04, 0x2d, 0x72, 0x6f, // 082c .B 4 '-rot'
	0x74, 0x00, 0x00, 0x00, // 0830 \
	0x00, 0x00, 0x08, 0x20, // 0834 .C w/rot
	0x50, 0x02, 0x02, 0x01, // 0838 	ROLL	2 1
	0x04, 0x32, 0x64, 0x75, // 083c .B 4 '2dup'
	0x70, 0x00, 0x00, 0x00, // 0840 \
	0x00, 0x00, 0x08, 0x2c, // 0844 .C w/-rot
	0x50, 0x00, 0x02, 0x00, // 0848 	PICK	2 0
	0x05, 0x32, 0x6f, 0x76, // 084c .B 5 '2over'
	0x65, 0x72, 0x00, 0x00, // 0850 \
	0x00, 0x00, 0x08, 0x3c, // 0854 .C w/2dup
	0x50, 0x00, 0x02, 0x02, // 0858 	PICK	2 2
	0x05, 0x32, 0x6f, 0x76, // 085c .B 5 '2over'
	0x65, 0x72, 0x00, 0x00, // 0860 \
	0x00, 0x00, 0x08, 0x4c, // 0864 .C w/2over
	0x50, 0x02, 0x02, 0x02, // 0868 	ROLL	2 2
	0x04, 0x32, 0x72, 0x6f, // 086c .B 4 '2rot'
	0x74, 0x00, 0x00, 0x00, // 0870 \
	0x00, 0x00, 0x08, 0x5c, // 0874 .C w/2swap
	0x50, 0x02, 0x02, 0x04, // 0878 	ROLL	2 4
	0x05, 0x32, 0x2d, 0x72, // 087c .B 5 '2-rot'
	0x6f, 0x74, 0x00, 0x00, // 0880 \
	0x00, 0x00, 0x08, 0x6c, // 0884 .C w/2rot
	0x50, 0x02, 0x04, 0x02, // 0888 	ROLL	4 2
	0x08, 0x65, 0x76, 0x61, // 088c .B 8 'evaluate'
	0x6c, 0x75, 0x61, 0x74, // 0890 \
	0x65, 0x00, 0x00, 0x00, // 0894 \
	0x00, 0x00, 0x08, 0x7c, // 0898 .C w/2-rot
	0x10, 0x00, 0x08, 0xa0, // 089c 	call	.
	0x46, 0x00, 0x00, 0x19, // 08a0 	PUSH	#tib[-1]
	0x00, 0x00, 0x00, 0x14, // 08a4 	2!
	0x4e, 0x00, 0x00, 0x00, // 08a8 	PUSH	0
	0x48, 0x00, 0x00, 0x0d, // 08ac 	PUSH	>in[-1]
	0x00, 0x00, 0x00, 0x11, // 08b0 	!
	0x41, 0xff, 0xff, 0xff, // 08b4 	PUSH	ffffffff
	0x48, 0x00, 0x00, 0x13, // 08b8 	PUSH	source-id
	0x00, 0x00, 0x00, 0x11, // 08bc 	!
	0x10, 0x00, 0x00, 0x44, // 08c0 	call	lineproc
	0x4e, 0x00, 0x00, 0x00, // 08c4 	PUSH	0
	0x48, 0x00, 0x00, 0x13, // 08c8 	PUSH	source-id
	0x00, 0x00, 0x00, 0x11, // 08cc 	!
	0x00, 0x00, 0x00, 0x01, // 08d0 	exit
}
